# Jidoteki Admin API tasks

- name: Ensure gcc is installed (yum)
  yum: name=gcc state=latest
  tags:
   - centos

- name: Ensure gcc is installed (apt)
  apt: name=gcc state=latest
  tags:
   - debian
   - ubuntu

- name: Backup important files
  shell: >
    chdir={{ api_path }}
    mkdir -p {{ admin_path }}/tmp/update/.backup && cp -rp {{ item }} {{ admin_path }}/tmp/update/.backup/{{ item }}
  ignore_errors: true
  with_items:
    - enterprise.pem
    - stunnel.log
    - stunnel.conf
  tags:
    - api
    - backup

- name: Ensure the tmp/update dir exists
  file: >
    state=directory
    path={{ admin_path }}/tmp/update
    owner=root
    group=root
    mode=0755
  tags:
    - api
    - dirs

- name: Download the Jidoteki Admin API
  command: >
    chdir={{ admin_path }}/tmp/update
    creates={{ admin_path }}/tmp/update/v{{ api_version }}.tar.gz
    curl -L -O https://github.com/unscramble/jidoteki-admin-api/archive/v{{ api_version }}.tar.gz
  tags:
    - api
    - tgz

- name: Install the API in /opt/jidoteki/api
  shell: >
    chdir={{ admin_path }}/tmp/update
    tar -zxf v{{ api_version }}.tar.gz && rm -rf {{ api_path }} && mv jidoteki-admin-api-{{ api_version }} {{ api_path }}
  tags:
    - api
    - sha1

- name: Create '/opt/jidoteki/api/.lib' directory
  file: >
    state=directory
    path={{ api_path }}/.lib
    owner=root
    group=root
    mode=0755
  tags:
    - api
    - dirs

- name: Create '/opt/jidoteki/api/stunnel.log' file
  file: >
    state=touch
    path={{ api_path }}/stunnel.log
    owner=root
    group=admin
    mode=0660
  tags:
    - api
    - files

- name: Ensure temporary .pil directory exists
  file: >
    state=directory
    path=/opt/jidoteki/admin/home/.pil
    owner=root
    group=admin
    mode=0775
  tags:
    - api
    - files

- name: Download the API dependencies (parson)
  command: >
    chdir={{ admin_path }}/tmp/update
    creates={{ admin_path }}/tmp/update/parson.git
    git clone https://github.com/aw/parson.git parson.git
  tags:
    - api
    - build

- name: Download the API dependencies (unit)
  command: >
    chdir={{ admin_path }}/tmp/update
    creates={{ admin_path }}/tmp/update/picolisp-unit.git
    git clone https://github.com/aw/picolisp-unit.git picolisp-unit.git
  tags:
    - api
    - build

- name: Download the API dependencies (json)
  command: >
    chdir={{ admin_path }}/tmp/update
    creates={{ admin_path }}/tmp/update/picolisp-json.git
    git clone https://github.com/aw/picolisp-json.git picolisp-json.git
  tags:
    - api
    - build

- name: Build the API dependencies
  shell: >
    chdir={{ api_path }}
    REPO_PREFIX=file://{{ admin_path }}/tmp/update make
  tags:
    - api
    - build

- name: Download the PicoLisp dependency
  command: >
    chdir={{ admin_path }}/tmp/update
    creates={{ admin_path }}/tmp/update/picoLisp-{{ picolisp_version }}.tgz
    curl -L -O http://software-lab.de/picoLisp-{{ picolisp_version }}.tgz
  tags:
    - api
    - picolisp
    - tgz

- name: Download the PicoLisp 64-bit .s files
  command: >
    chdir={{ admin_path }}/tmp/update
    creates={{ admin_path }}/tmp/update/x86-64.linux.tgz
    curl -L -O http://software-lab.de/x86-64.linux.tgz
  tags:
    - api
    - picolisp
    - tgz

- name: Upload the PicoLisp sha1 checksum to /opt/jidoteki/admin/tmp/update/
  template: >
    src=picolisp.sha1.j2
    dest={{ admin_path }}/tmp/update/picolisp.sha1
    owner=root
    group=root
    mode=0644
  tags:
    - api
    - picolisp
    - sha1

- name: Verify hash of the PicoLisp and install it in /opt/jidoteki/api/.lib
  shell: >
    chdir={{ admin_path }}/tmp/update
    sha1sum -c {{ admin_path }}/tmp/update/picolisp.sha1 && tar --no-same-owner -xf picoLisp-{{ picolisp_version }}.tgz && tar --no-same-owner -xf x86-64.linux.tgz && mv -f src64/* picoLisp/src64/ && rm -rf {{ api_path }}/.lib/picolisp && mv picoLisp {{ api_path }}/.lib/picolisp
  tags:
    - api
    - picolisp
    - sha1

- name: Build PicoLisp 64-bit
  shell: >
    chdir={{ api_path }}/.lib/picolisp/src64
    make
  tags:
    - api
    - picolisp
    - build

- name: Restore important files
  shell: >
    chdir={{ api_path }}
    cp -rp {{ admin_path }}/tmp/update/.backup/{{ item }} {{ api_path }}/{{ item }}
  ignore_errors: true
  with_items:
    - enterprise.pem
    - stunnel.log
    - stunnel.conf
  tags:
    - api
    - backup

- name: Fix permissions on directories
  command: >
    chdir={{ api_path }}
    chown -R root:admin .lib .modules
  tags:
    - api
    - permissions

- name: Cleanup temp files
  file: >
    dest={{ admin_path }}/tmp/update/{{ item }}
    state=absent
  with_items:
    - "v{{ api_version }}.tar.gz"
    - "picoLisp-{{ picolisp_version }}.tgz"
    - picolisp.sha1
    - x86-64.linux.tgz
    - src64
    - .backup
  tags:
    - api
    - picolisp
    - cleanup
